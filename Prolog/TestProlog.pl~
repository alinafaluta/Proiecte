%1. a. Sa se scrie un predicat care intoarce diferenta a doua multimi.
% b. Sa se scrie un predicat care adauga intr-o lista dupa fiecare
% element par valoarea 1.

nr_aparitii(_,0,[]):-!.
nr_aparitii(E,Rez,[E|T]):-!,nr_aparitii(E,Rez1,T),Rez is Rez1+1.
nr_aparitii(E,Rez,[_|T]):-nr_aparitii(E,Rez,T).

diferenta([],_,[]):-!.
diferenta([H|T],B,[H|Rez]):-nr_aparitii(H,R,B), R =:= 0,!,
    diferenta(T,B,Rez).
diferenta([_|T],B,Rez):- diferenta(T,B,Rez).

adaug_unu([],[]):-!.
adaug_unu([H|T],[H,1|Rez]):-H mod 2 =:=0, !, adaug_unu(T,Rez).
adaug_unu([H|T],[H|Rez]):-adaug_unu(T,Rez).

% 2. a. Sa se scrie un predicat care determina cel mai mic multiplu comun
% al elementelor unei liste formate din numere intregi.
% b. Sa se scrie un predicat care adauga dupa 1-ul, al 2-lea, al 4-lea,
% al 8-lea ...element al unei liste o valoare v data.

cmmdc(A, A, A):- !.
cmmdc(A,0,A):-!.
cmmdc(0,B,B):-!.
cmmdc(A,B,Rez):-A>B,!,A1 is A-B, cmmdc(A1,B,Rez).
cmmdc(A,B,Rez):-B>A, B1 is B-A, cmmdc(A,B1,Rez).

cmmmc(A,B,R):-cmmdc(A,B,Rez), R is A*B/Rez.

cmmmc_lista([Cm],Cm):-!.
cmmmc_lista([A|[B|T]],R):-cmmmc(A,B,C),cmmmc_lista([C|T],R).

add_aux([],_,_,[]):-!.
add_aux([H|T],P,Po,[H,1|Rez]):-P =:=1,!,Po1 is Po+1,P1 is P+1,
    add_aux(T,P1,Po1,Rez).
add_aux([H|T],P,Po,[H,1|Rez]):- Po =:= P,!,P1 is P*2, Po1 is Po+1,
    add_aux(T,P1,Po1,Rez).
add_aux([H|T],P,Po,[H|Rez]):-Po1 is Po+1,add_aux(T,P,Po1,Rez).

add(L,R):-add_aux(L,1,1,R).

% 3. a. Sa se scrie un predicat care transforma o lista intr-o multime,
% in ordinea primei aparitii. Exemplu: [1,2,3,1,2] e transformat in
% [1,2,3]. b. Sa se scrie o functie care descompune o lista de numere
% intr-o lista de forma [ lista-de-numere-pare lista-de-numere-impare]
% (deci lista cu doua elemente care sunt liste de intregi), si va
% intoarce si numarul elementelor pare si impare.

multime(L,R):- multime_aux(L,L,R).

multime_aux([],_,[]).
multime_aux([H|T],L,[H|Rez]):-nr_aparitii(H,R,L),R =:=1,!,
    multime_aux(T,L,Rez).

multime_aux([_|T],L,Rez):-multime_aux(T,L,Rez).

len_list([], 0):- !.

len_list([_|T], L):-
		len_list(T, L1),
		L is L1 + 1.

lista_par([], []):- !.

lista_par([H|T], [H|Rez]):-
		H mod 2 =:= 0,
		!,
		lista_par(T, Rez).

lista_par([_|T], Rez):-
		lista_par(T, Rez).

lista_impar([], []):- !.

lista_impar([H|T], [H|Rez]):-
		H mod 2 =:= 1,
		!,
		lista_impar(T, Rez).

lista_impar([_|T], Rez):-
		lista_impar(T, Rez).

lista_par_impar(L, [Par, Impar], Lpar, Limpar):-
		lista_par(L, Par),
		lista_impar(L, Impar),
		len_list(Par, Lpar),
		len_list(Impar, Limpar).


% 4. a. Sa se scrie un predicat care substituie intr-o lista un element
% printr-o alta lista. b. Sa se elimine elementul de pe pozitia a n-a a
% unei liste liniare.

adauga1([],Rez,Rez):-!.
adauga1([],[],[]):-!.
adauga1([H|T],Rez,Col):-adauga1(T,Rez,Col1),
    Col=[H|Col1].

substituie_aux([],_,_,Rez,Rez):-!.

substituie_aux([H|T],E,L,Col,Rez):- H=E,! ,
    adauga1(Col,L,Rez1),
    substituie_aux(T,E,L,Rez1,Rez).

substituie_aux([H|T],E,L,Col,Rez):-
    H\= E,
    adauga1(Col,[H],Rez1),
    substituie_aux(T,E,L,Rez1,Rez).

substituie(L,E,T,Rez):-substituie_aux(L,E,T,[],Rez).


elimin(_,[],[]):-!.
elimin(N,[_|T],Rez):-N=:=1,!,N1 is N-1,elimin(N1,T,Rez).
elimin(N,[H|T],[H|Rez]):-N1 is N-1,elimin(N1,T,Rez).

% 5. a. Sa se scrie un predicat care sterge toate aparitiile unui anumit
% atom dintr-o lista. b. Definiti un predicat care, dintr-o lista de
% atomi, produce o lista de perechi (atom n), unde atom apare in lista
% initiala de n ori. De ex: numar([1, 2, 1, 2, 1, 3, 1], X) va produce X
% = [[1, 4], [2, 2], [3, 1]].

sterg_el(_,[],[]):-!.
sterg_el(E,[E|T],Rez):-sterg_el(E,T,Rez).
sterg_el(E,[H|T],[H|Rez]):-sterg_el(E,T,Rez).

pere([],_,Col,Col):-!.
pere([H|_],L,Col,Rez):-nr_aparitii(H,R,L),sterg_el(H,L,Re),
		pere(Re,Re,[[H,R]|Col],Rez).
perechi(L,R):-pere(L,L,[],R).

% 6. a. Sa se scrie un predicat care elimina dintr-o lista toate
% elementele care se repeta (ex: l=[1,2,1,4,1,3,4] => l=[2,3]) b. Sa se
% elimine toate aparitiile elementului maxim dintr-o lista de numere
% intregi.

lista_jmk([],_,[]):-!.
lista_jmk([H|T],L,[H|Rez]):-nr_aparitii(H,R,L),R =:=1,!,
		lista_jmk(T,L,Rez).
lista_jmk([_|T],L,Rez):-lista_jmk(T,L,Rez).

lista_nu_duplicate(L,R):-lista_jmk(L,L,R).

maxim([],M,M):-!.
maxim([H|T],M,Rez):-H>M,!,M1 is H,maxim(T,M1,Rez).
maxim([_|T],M,Rez):-maxim(T,M,Rez).
maxi([H|T],R):-maxim([H|T],H,R),!.

sterg_max(L,R):- maxi(L,Re), sterg_el(Re,L,R),!.

% 7. a. Sa se scrie un predicat care intoarce reuniunea a doua multimi.
% b. Sa se scrie un predicat care, primind o lista, intoarce multimea
% tuturor perechilor din lista. De ex, cu [a, b, c, d] va produce [[a,
% b], [a, c], [a, d], [b, c], [b, d], [c, d]].


reuniune([],B,B):-!.
reuniune([H|T],B,[H|Rez]):- nr_aparitii(H,R,B), R=:=0,!,
		reuniune(T,B,Rez).
reuniune([_|T],B,Rez):-reuniune(T,B,Rez).

perechi(_,[],[]):-!.
perechi(E,[H|T],[[E,H]|Rez]):-perechi(E,T,Rez).

lista_perechi_aux([],Col,Col):-!.
lista_perechi_aux([H|T],Col,Rez):-perechi(H,T,R),
		lista_perechi_aux(T,[R|Col],Rez).
lista_perechi(L,R):-lista_perechi_aux(L,[],R).




















