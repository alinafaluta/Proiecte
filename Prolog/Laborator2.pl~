% Sa se scrie un predicat care substituie intr-o lista un element
% printr-o alta lista
% substituie(l:list,e:int,t:list,rez:list)=substituie_aux(l,e,t,[],rez)
% substituie_aux(l:list,e:int,t:list,col:list,rez:list)
% l-lista pe care o vom prelucra
% e - elementul pe care il vom inlocui
% t - lista cu care vom inlocui elementul
% col - variabila colectoare
% rez - lista rezultat
% model de flux: (i,i,i,o),(i,i,i,i)
%
% adauga(l:list, r:list, rez:list)
% l - prima lista
% r - a doua lista
% rez - rezultatul reuniunii dintre cele 2 liste
% model de flux: (i,i,o),(i,i,i)

adauga([],Rez,Rez):-!.
adauga([],[],[]):-!.
adauga([H|T],Rez,Col):-adauga(T,Rez,Col1),
    Col=[H|Col1].

substituie_aux([],_,_,Rez,Rez):-!.

substituie_aux([H|T],E,L,Col,Rez):- H=E,! ,
    adauga(Col,L,Rez1),
    substituie_aux(T,E,L,Rez1,Rez).

substituie_aux([H|T],E,L,Col,Rez):-
    H\= E,
    adauga(Col,[H],Rez1),
    substituie_aux(T,E,L,Rez1,Rez).

substituie(L,E,T,Rez):-substituie_aux(L,E,T,[],Rez).

% Sa se elimine elementul de pe pozitia a n-a a unei liste liniare.
% elimin(l:list,n:int,Rez:list)
% l-lista liniara din care eliminam elementul
% n - pozitia de pe care se va elimina elemetul
% rez - lista rezultata
% model de flux:(i,i,o),(i,i,i)

elimin([],_,[]):-!.

elimin([_|T],N,Rez):-
    N == 0 ,!,
    N1 is N - 1,
    elimin(T,N1,Rez).

elimin([H|T],N,Rez):-
    N1 is N - 1,
    elimin(T,N1,L),
    Rez = [H|L].







