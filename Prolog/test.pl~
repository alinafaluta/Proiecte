

%search(L: list, El: int)
%L - lista
%El - element cautat
%(i, o)
search([El|_], El).

search([_|L], El):-
		search(L, El).


%diferenta(A:list, B:list, Rez:list)
%A - prima lista
%B - a doua lista
%Rez - rezultatul diferentei {A\B}
%(i, i, o)
diferenta([], _, []).

diferenta([H|A], B, Rez):-
		search(B, H),
		!,
		diferenta(A, B, Rez).

diferenta([H|A], B, [H|Rez]):-
		diferenta(A, B, Rez).

%2
%adauga_par(L:list, Rez:list)
%L - input list
%R - result
%(i, o)

adauga_par([], []):- !.

adauga_par([H|L], [H|[1|Rez]]):-
		H mod 2 =:= 0,
		!,
		adauga_par(L, Rez).

adauga_par([H|L], [H|Rez]):-
		adauga_par(L, Rez).

%3

cmmdc(A, A, A):- !.

cmmdc(0, B, B):- !.

cmmdc(A, 0, A):- !.

cmmdc(A, B, Rez):-
		A > B,
		!,
		A1 is A - B,
		cmmdc(A1, B, Rez).
cmmdc(A, B, Rez):-
		B > A,
		B1 is B - A,
		cmmdc(A, B1, Rez).

cmmmc(A, B, Rez):-
		cmmdc(A, B, C),
		Rez is (A * B) / C.


cmmmc_lista([Cm], Cm):- !.

cmmmc_lista([H1|[H2|L]], Rez):-
		cmmmc(H1, H2, Cm),
		cmmmc_lista([Cm|L], Rez).


%4
%(i, i, i, i, o)

adauga(L, El, Rez):- adauga_lista2(L, El, 1, 1, Rez).

adauga_lista2([], _, _, _, []):-!.
adauga_lista2([H|L], El, Poz, I, [H|[El|Rez]]):-
		Poz =:= I,
		!,
		Poz1 is Poz * 2,
		I1 is I + 1,
		adauga_lista2(L, El, Poz1, I1, Rez).

adauga_lista2([H|L], El, Poz, I, [H|Rez]):-
		I1 is I + 1,
		adauga_lista2(L, El, Poz, I1, Rez).


%5
%lista -> multime (prima aparitie)
%(i, i, o)

sterge_aparitii([], _, []):- !.


sterge_aparitii([El|L], El, Rez):-
		!,
		sterge_aparitii(L, El, Rez).

sterge_aparitii([H|L], El, [H|Rez]):-
		sterge_aparitii(L, El, Rez).

multime_inceput([], []):-!.

multime_inceput([H|L], [H|Rez]):-
		sterge_aparitii(L, H, L1),
		multime_inceput(L1, Rez).

%6

len_list([], 0):- !.

len_list([_|T], L):-
		len_list(T, L1),
		L is L1 + 1.

lista_par([], []):- !.

lista_par([H|T], [H|Rez]):-
		H mod 2 =:= 0,
		!,
		lista_par(T, Rez).

lista_par([_|T], Rez):-
		lista_par(T, Rez).

lista_impar([], []):- !.

lista_impar([H|T], [H|Rez]):-
		H mod 2 =:= 1,
		!,
		lista_impar(T, Rez).

lista_impar([_|T], Rez):-
		lista_impar(T, Rez).

lista_par_impar(L, [Par, Impar], Lpar, Limpar):-
		lista_par(L, Par),
		lista_impar(L, Impar),
		len_list(Par, Lpar),
		len_list(Impar, Limpar).

%7


add_list(A, [], A):- !.
add_list([], B, B):- !.

add_list(L, [H|L1], [H|Rez]):-
		add_list(L, L1, Rez).

subst_el([], _, _, []):- !.

subst_el([El|T], El, L, Rez):-
		!,
		subst_el(T, El, L, Rez1),
		add_list(Rez1, L, Rez).

subst_el([H|T], El, L, [H|Rez]):-
		subst_el(T, El, L, Rez).


%11


nr_apar([], _, 0):- !.

nr_apar([El|T], El, N):-
		!,
		nr_apar(T, El, N1),
		N is N1 + 1.

nr_apar([_|T], El, N):-
		nr_apar(T, El, N).


sterge([], _, []):- !.

sterge([El|T], El, Rez):-
		!,
		sterge(T, El, Rez).

sterge([H|T], El, [H|Rez]):-
		sterge(T, El, Rez).


elimina_apar([], []):- !.

elimina_apar([H|T], [H|Rez]):-
		nr_apar([H|T], H, 1),
		!,
		elimina_apar(T, Rez).

elimina_apar([H|T], Rez):-
		sterge(T, H, R),
		elimina_apar(R, Rez).

%12

max_aux([], Max, Max):- !.

max_aux([H|T], Max, M):-
		H > Max,
		!,
		Max1 is H,
		max_aux(T, Max1, M).

max_aux([_|T], Max, M):-
		max_aux(T, Max, M).


max([H|L], M):- max_aux([H|L], H, M).

elimina_max([], []):- !.

elimina_max(L, Rez):-
		max(L, Max),
		elimina_max_aux(L, Max, Rez).

elimina_max_aux([], _, []):- !.

elimina_max_aux([El|T], El, Rez):-
		!,
		elimina_max_aux(T, El, Rez).

elimina_max_aux([H|T], El, [H|Rez]):-
		elimina_max_aux(T, El, Rez).



%13 reuniunea a 2 multimi

apare13([El|_], El):- !.
apare13([_|T], El):-
		apare13(T, El).

reuniune13(A, [], A):- !.
reuniune13([], B, B):- !.
reuniune13(A, [H|B], Rez):-
		apare13(A, H),
		!,
		reuniune13(A, B, Rez).
reuniune13(A, [H|B], [H|Rez]):-
		reuniune13(A, B, Rez).

%14  toate perechile de elemente


pair_list([], _, []):- !.
pair_list([H|T], El, [[El, H]|Rez]):-
		pair_list(T, El, Rez).

concat14(A, [], A):- !.
concat14([], B, B):- !.
concat14(A, [H|B], [H|Rez]):-
		concat14(A, B, Rez).


perechi14([], []):- !.
perechi14([H|T], Rez):-
		pair_list(T, H, List),
		perechi14(T, Rez1),
		concat14(Rez1, List, Rez).

%15

sterge15([], _, []):- !.
sterge15([El|T], El, Rez):-
		!,
		sterge15(T, El, Rez).
sterge15([H|T], El, [H|Rez]):-
		sterge15(T, El, Rez).

emultime15(A):-
		multime15(A, B1),
		B1 = A.

multime15([], []):- !.
multime15([H|T], [H|Rez]):-
		sterge15(T, H, T1),
		multime15(T1, Rez).

%16

elimin16([], _, _, []):- !.
elimin16([El|T], El, N, Rez):-
		N > 0,
		!,
		N1 is N - 1,
		elimin16(T, El, N1, Rez).
elimin16([H|T], El, N, [H|Rez]):-
		elimin16(T, El, N, Rez).

sterge16([], _, []):- !.
sterge16([El|T], El, Rez):-
		!,
		sterge16(T, El, Rez).
sterge16([H|T], El, [H|Rez]):-
		sterge16(T, El, Rez).

multime16([], []):- !.
multime16([H|T], [H|Rez]):-
		sterge16(T, H, T1),
		multime16(T1, Rez).

elimin_tot16(A, Rez):-
		multime16(A, M),
		elimin_lista16(A, M, Rez).

elimin_lista16(A, [], A):- !.

elimin_lista16(T, [H|M], Rez):-
		elimin16(T, H, 3, R),
		elimin_lista16(R, M, Rez).

%17

apare17([El|_], El):- !.
apare17([_|T], El):-
		apare17(T, El).

intersectie17(_, [], []):- !.
intersectie17([], _, []):- !.
intersectie17([H|T], B, [H|Rez]):-
		apare17(B, H),
		!,
		intersectie17(T, B, Rez).
intersectie17([_|T], B, Rez):-
		intersectie17(T, B, Rez).

%18

multime18(St, End, []):-
		St > End,
		!.
multime18(St, End, []):-
		St =:= End + 1,
		!.
multime18(St, End, [St|Rez]):-
		St1 is St + 1,
		multime18(St1, End, Rez).


%19

len_list19([], 0):- !.
len_list19([_|T], L):-
		len_list(T, L1),
		L is L1 + 1.

inserare19(A, N, _, A):-
		len_list19(A, L),
		N > L,
		!;
		N < 1,
		!.
inserare19(A, 0, _, A):- !.
inserare19(A, 1, El, [El|Rez]):-
		!,
		inserare19(A, 0, El, Rez).
inserare19([H|A], N, El, [H|Rez]):-
		N1 is N - 1,
		inserare19(A, N1, El, Rez).

%20

cmmdc20(A, 0, A):-!.
cmmdc20(0, B, B):-!.
cmmdc20(A, A, A):-!.
cmmdc20(A, B, Rez):-
		A > B,
		!,
		A1 is A - B,
		cmmdc(A1, B, Rez).
cmmdc20(A, B, Rez):-
		B > A,
		B1 is B - A,
		cmmdc(A, B1, Rez).

cmmdc_lista20([Cm], Cm):- !.
cmmdc_lista20([H1, H2|T], Cm):-
		cmmdc(H1, H2, C),
		cmmdc_lista20([C|T], Cm).



%21 - o lista este vale

minim([], Min, Min):- !.
minim([L1|L], Min, M):-
		Min > L1,
		minim(L, L1, M).
minim([_|L], Min, M):-
		minim(L, Min, M).

vale_aux([_], 0, I):-
		!,
		I >= 3.
vale_aux([L1,L2|L], 1, I):-
		L1 > L2,
		!,
		I1 is I + 1,
		vale_aux([L2|L], 1, I1).

vale_aux([L1,L2|L], 1, I):-
		L1 < L2,
		I > 1,
		!,
		I1 is I + 1,
		vale_aux([L2|L], 0, I1).


vale_aux([L1,L2|L], 0, I):-
		L1 < L2,
		I1 is I + 1,
		vale_aux([L2|L], 0, I1).

vale21(L):- vale_aux(L, 1, 1).

%22 - suma alternanta a elem unei liste

suma_elem22([], 0).
suma_elem22([H|T], S):-
		suma_elem_aux(T, 1, H, S).

suma_elem_aux([], _, S, S):- !.
suma_elem_aux([H|T], 1, S, Suma):-
		!,
		S1 is S - H,
		suma_elem_aux(T, 0, S1, Suma).
suma_elem_aux([H|T], 0, S, Suma):-
		S1 is S + H,
		suma_elem_aux(T, 1, S1, Suma).

%23

substituie23([], _, _, []):- !.
substituie23([H|T], H, El, [El|Rez]):-
		!,
		substituie23(T, H, El, Rez).
substituie23([C|T], H, El, [C|Rez]):-
		substituie23(T, H, El, Rez).

%24

sublist24([], _, _, []):- !.

sublist24([H|T], M, N, [H|Rez]):-
		M =< 1,
		N >= 1,
		!,
		M1 is M - 1,
		N1 is N - 1,
		sublist24(T, M1, N1, Rez).

sublist24([_|T], M, N, Rez):-
		M1 is M - 1,
		N1 is N - 1,
		sublist24(T, M1, N1, Rez).


%25

nr_apar25([], _, 0):- !.
nr_apar25([El|T], El, N):-
		!,
		nr_apar25(T, El, N1),
		N is N1 + 1.
nr_apar25([_|T], El, N):-
		nr_apar25(T, El, N).

multime25([], []):- !.
multime25([H|T], [H|Rez]):-
		nr_apar(T, H, 0),
		!,
		multime25(T, Rez).
multime25([_|T], Rez):-
		multime25(T, Rez).

%26

cmmdc26(A, 0, A):- !.
cmmdc26(0, B, B):- !.
cmmdc26(A, A, A):- !.
cmmdc26(A, B, Rez):-
		A > B,
		!,
		A1 is A - B,
		cmmdc26(A1, B, Rez).
cmmdc26(A, B, Rez):-
		B > A,
		B1 is B - A,
		cmmdc26(A, B1, Rez).

cmmdc_lista16([M], M):- !.

cmmdc_lista16([H1, H2|T], M):-
		cmmdc26(H1, H2, Cm),
		cmmdc_lista16([Cm|T], M).

%27

apare27([El|_], El):- !.
apare27([_|T], El):-
		apare27(T, El).
sterge27([], _, []):- !.
sterge27([El|T], El, Rez):-
		!,
		sterge27(T, El, Rez).
sterge27([H|T], El, [H|Rez]):-
		sterge27(T, El, Rez).

egal_multime([], []):- !.
egal_multime([H|T], B):-
		apare27(B, H),
		sterge27(B, H, B1),
		egal_multime(T, B1).

%28

n_element([H|_], 1, H):- !.
n_element([_|T], N, Rez):-
		N > 0,
		!,
		N1 is N - 1,
		n_element(T, N1, Rez).

%29

nr_par([]):- !.
nr_par([_, _|H]):-
		nr_par(H).

%30

minim_aux([], Min, Min):- !.
minim_aux([H|T], Min, M):-
		H < Min,
		!,
		minim_aux(T, H, M).
minim_aux([_|T], Min, M):-
		minim_aux(T, Min, M).

aparitie30([H|L], R):-  minim_aux([H|L],H,M),
		aparitie_aux30([H|L], 1, M, R).

aparitie_aux30([Min|L], 1, Min, L):- !.

aparitie_aux30([H|L], 1, Min, [H|Rez]):-
		aparitie_aux30(L, 1, Min, Rez).
