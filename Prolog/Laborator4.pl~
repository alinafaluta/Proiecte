% Fiind dat un numar n pozitiv, se cere sa se determine toate
% descompunerile sale ca suma de numere prime distincte.

% nr_div(N:Integer,D:Integer,El:Integer,Rez:Integer)
% N-numarul pentru care vom calcula divizorii
% D-numarul curent de divizori (initial va fi 0)
% El - divizorul curent (initial va fi 1)
% Rez - numarul final de divizori
% modelul de flux (i,i,i,o)-determinist
nr_div(N,D,El,D):-El > N,!.
nr_div(N,D,El,Rez):- N mod El =:=0,!,D1 is D+1,El1 is El+1,
    nr_div(N,D1,El1,Rez).
nr_div(N,D,El,Rez):-El1 is El+1,
    nr_div(N,D,El1,Rez).


% prim(N:Integer)
% N - numarul pe care il vom verifica daca e prim
% modelul de flux (i)-determinist


prim(N):- nr_div(N,0,1,R),R =:= 2.

%vom construi o lista cu toate numere prime mai mici sa egale cu N
%nr_prime(N,Rez)=nr_prime_aux(N:Integer,E:integer,Col:list,Rez:list)
%N - toate numerele prime vor fi mai mici decat N
%E - elementul curent pe care il testam daca il punem sau nu in lista
%Col - variabila colectoare
%Rez- rezultatul final
%model de flux(i,i,1,o) - determinist

nr_prime_aux(N,E,Col,Col):-E>=N,!.
nr_prime_aux(N,E,Col,Rez):-prim(E),!,
    E1 is E+1,nr_prime_aux(N,E1,[E|Col],Rez).
nr_prime_aux(N,E,Col,Rez):-E1 is E+1,nr_prime_aux(N,E1,Col,Rez).

nr_prime(N,Rez):-nr_prime_aux(N,1,[],Rez).

%candidat(E:Integer,L:list)
%E-pe rand cate un element din L
%L-lista din care luam pe rand cate un element candidat
%model de flux(o,i)-nedeterminist

candidat(E,[E|_]).
candidat(E,[_|T]):-candidat(E,T).


%descompuneri(N:integer,Rez:list)
%N -numarul pentru care cautam descompunerile ca suma de numere prime
%Rez - rezultatele finale
%model de flux (i,o) - nedeterminist
%descompuneri_aux(N:integer,Rez:list,L:list,Col:list,S:Integer)
%N -numarul pentru care cautam descompunerile ca suma de numere prime
%Rez - rezultatele finale
%L - lista cu numerele prime de la 2 la N
%Col - variabila colectoare ce aduna pe rand solutiile partiale
%S - suma actuala a elementelor din colectoare
%model de flux (i,o,i,i,i)-nedeterminist
%
descompuneri(N,Rez):-nr_prime(N,R),candidat(E,R),
    descompuneri_aux(N,Rez,R,[E],E).
descompuneri_aux(N,Col,_,Col,N):-!.
descompuneri_aux(N,Rez,L,[H|Col],S):-candidat(E,L),
    E<H,S1 is S+E, S1=<N,descompuneri_aux(N,Rez,L,[E|[H|Col]],S1).

















